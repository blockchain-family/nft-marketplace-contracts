pragma ever-solidity >= 0.62.0;

import "../../abstract/BaseOffer.tsol";

import "tip3/contracts/interfaces/ITokenWallet.tsol";
import "tip3/contracts/interfaces/IBurnableTokenWallet.tsol";
import "../../libraries/OperationType.tsol";

abstract contract SupportNativeTokenOffer is BaseOffer {

    function wnativeRoot()
        external
        view
        returns (address)
    {
        return _getWnativeRoot();
    }

    function _wnativeBurn(
        uint128 amount,
        address user,
        TvmCell payload
    )
        internal
        reserve
    {
        address remainingGasTo;
        uint8 operationType;

        TvmSlice payloadSlice = payload.toSlice();
        if (payloadSlice.bits() >= 8) {
            operationType = payloadSlice.decode(uint8);
        }
        if (payloadSlice.bits() >= 256) {
            remainingGasTo = payloadSlice.decode(address);
        }

        if (user == remainingGasTo) {
            user.transfer({ value: 0, flag: 128 + 2, bounce: false });
        } else {
            user.transfer({ value: amount, flag: 1, bounce: false });
            remainingGasTo.transfer({ value: 0, flag: 128 + 2, bounce: false });
        }
    }

    function _transfer(
        address _paymentToken,
        uint128 _amount,
        address _user,
        address _remainingGasTo,
        address _tokenWallet,
        uint128 _value,
        uint16 _flag,
        uint128 _deployWalletGrams,
        TvmCell _payload
    )
        internal
        virtual
    {
        TvmBuilder builder;
        builder.store(OperationType.Transfer);
        builder.store(_remainingGasTo);

        if (_paymentToken == _getWnativeRoot()) {
            IBurnableTokenWallet(_tokenWallet)
                .burn{ value: _value, flag: _flag, bounce: false }(
                    _amount,
                    _user,
                    address(this),
                    builder.toCell()
                );
        } else {
            ITokenWallet(_tokenWallet).transfer{ value: _value, flag: _flag, bounce: false }(
                _amount,
                _user,
                _deployWalletGrams,
                _remainingGasTo,
                false,
                _payload
            );
        }
    }
}
